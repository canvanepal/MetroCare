generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  phone       String   @unique
  name        String?
  email       String?
  isVerified  Boolean  @default(false)
  role        UserRole @default(CITIZEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reports     Report[]
  votes       Vote[]
  otpCodes    OtpCode[]

  @@map("users")
}

model OtpCode {
  id        String   @id @default(cuid())
  phone     String
  code      String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User?    @relation(fields: [phone], references: [phone])

  @@map("otp_codes")
}

model Report {
  id              String       @id @default(cuid())
  title           String
  description     String
  category        IssueCategory
  subCategory     String?
  priority        Priority     @default(MEDIUM)
  status          ReportStatus @default(PENDING)
  
  // Location data
  latitude        Float
  longitude       Float
  address         String
  landmark        String?
  
  // Media
  images          String[]     // Array of image URLs
  
  // Metadata
  reporterId      String
  assignedTo      String?
  upvotes         Int          @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  resolvedAt      DateTime?
  
  // AI similarity data
  imageEmbedding  Float[]      // CLIP embeddings for image similarity
  similarReports  String[]     // IDs of similar reports
  
  // Relations
  reporter        User         @relation(fields: [reporterId], references: [id])
  votes           Vote[]
  statusUpdates   StatusUpdate[]

  @@map("reports")
}

model Vote {
  id       String @id @default(cuid())
  userId   String
  reportId String
  
  createdAt DateTime @default(now())
  
  // Relations
  user     User   @relation(fields: [userId], references: [id])
  report   Report @relation(fields: [reportId], references: [id])
  
  @@unique([userId, reportId])
  @@map("votes")
}

model StatusUpdate {
  id          String   @id @default(cuid())
  reportId    String
  status      ReportStatus
  message     String?
  updatedBy   String?
  createdAt   DateTime @default(now())
  
  // Relations
  report      Report   @relation(fields: [reportId], references: [id])
  
  @@map("status_updates")
}

// Enums
enum UserRole {
  CITIZEN
  ADMIN
  MODERATOR
}

enum IssueCategory {
  ROADS_TRANSPORT
  UTILITIES
  ENVIRONMENT
  PUBLIC_SAFETY
  INFRASTRUCTURE
  WASTE_MANAGEMENT
  PARKS_RECREATION
  HOUSING
  HEALTH_SANITATION
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportStatus {
  PENDING
  ACKNOWLEDGED
  IN_PROGRESS
  RESOLVED
  REJECTED
  DUPLICATE
}
